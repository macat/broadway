// Code generated by protoc-gen-go.
// source: events.proto
// DO NOT EDIT!

/*
Package plugins is a generated protocol buffer package.

It is generated from these files:
	events.proto

It has these top-level messages:
	InstanceEvent
	Ack
*/
package plugins

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type InstanceStatus int32

const (
	InstanceStatus_NEW       InstanceStatus = 0
	InstanceStatus_DEPLOYING InstanceStatus = 1
	InstanceStatus_ERROR     InstanceStatus = 2
	InstanceStatus_DEPLOYED  InstanceStatus = 3
	InstanceStatus_DELETING  InstanceStatus = 4
	InstanceStatus_DELETED   InstanceStatus = 5
)

var InstanceStatus_name = map[int32]string{
	0: "NEW",
	1: "DEPLOYING",
	2: "ERROR",
	3: "DEPLOYED",
	4: "DELETING",
	5: "DELETED",
}
var InstanceStatus_value = map[string]int32{
	"NEW":       0,
	"DEPLOYING": 1,
	"ERROR":     2,
	"DEPLOYED":  3,
	"DELETING":  4,
	"DELETED":   5,
}

func (x InstanceStatus) String() string {
	return proto.EnumName(InstanceStatus_name, int32(x))
}
func (InstanceStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type InstanceEvent struct {
	Playbook        string         `protobuf:"bytes,1,opt,name=playbook" json:"playbook,omitempty"`
	Instance        string         `protobuf:"bytes,2,opt,name=instance" json:"instance,omitempty"`
	Status          InstanceStatus `protobuf:"varint,3,opt,name=status,enum=plugins.InstanceStatus" json:"status,omitempty"`
	PlaybookMessage string         `protobuf:"bytes,4,opt,name=playbook_message,json=playbookMessage" json:"playbook_message,omitempty"`
}

func (m *InstanceEvent) Reset()                    { *m = InstanceEvent{} }
func (m *InstanceEvent) String() string            { return proto.CompactTextString(m) }
func (*InstanceEvent) ProtoMessage()               {}
func (*InstanceEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Ack struct {
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
}

func (m *Ack) Reset()                    { *m = Ack{} }
func (m *Ack) String() string            { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()               {}
func (*Ack) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*InstanceEvent)(nil), "plugins.InstanceEvent")
	proto.RegisterType((*Ack)(nil), "plugins.Ack")
	proto.RegisterEnum("plugins.InstanceStatus", InstanceStatus_name, InstanceStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for InstanceEvents service

type InstanceEventsClient interface {
	Emit(ctx context.Context, in *InstanceEvent, opts ...grpc.CallOption) (*Ack, error)
}

type instanceEventsClient struct {
	cc *grpc.ClientConn
}

func NewInstanceEventsClient(cc *grpc.ClientConn) InstanceEventsClient {
	return &instanceEventsClient{cc}
}

func (c *instanceEventsClient) Emit(ctx context.Context, in *InstanceEvent, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := grpc.Invoke(ctx, "/plugins.InstanceEvents/Emit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for InstanceEvents service

type InstanceEventsServer interface {
	Emit(context.Context, *InstanceEvent) (*Ack, error)
}

func RegisterInstanceEventsServer(s *grpc.Server, srv InstanceEventsServer) {
	s.RegisterService(&_InstanceEvents_serviceDesc, srv)
}

func _InstanceEvents_Emit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceEventsServer).Emit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugins.InstanceEvents/Emit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceEventsServer).Emit(ctx, req.(*InstanceEvent))
	}
	return interceptor(ctx, in, info, handler)
}

var _InstanceEvents_serviceDesc = grpc.ServiceDesc{
	ServiceName: "plugins.InstanceEvents",
	HandlerType: (*InstanceEventsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Emit",
			Handler:    _InstanceEvents_Emit_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0x2d, 0x4b, 0xcd,
	0x2b, 0x29, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2f, 0xc8, 0x29, 0x4d, 0xcf, 0xcc,
	0x2b, 0x56, 0x5a, 0xcc, 0xc8, 0xc5, 0xeb, 0x99, 0x57, 0x5c, 0x92, 0x98, 0x97, 0x9c, 0xea, 0x0a,
	0x52, 0x21, 0x24, 0xc5, 0xc5, 0x51, 0x90, 0x93, 0x58, 0x99, 0x94, 0x9f, 0x9f, 0x2d, 0xc1, 0xa8,
	0xc0, 0xa8, 0xc1, 0x19, 0x04, 0xe7, 0x83, 0xe4, 0x32, 0xa1, 0x8a, 0x25, 0x98, 0x20, 0x72, 0x30,
	0xbe, 0x90, 0x3e, 0x17, 0x1b, 0x90, 0x55, 0x52, 0x5a, 0x2c, 0xc1, 0x0c, 0x94, 0xe1, 0x33, 0x12,
	0xd7, 0x83, 0xda, 0xa1, 0x07, 0x33, 0x3f, 0x18, 0x2c, 0x1d, 0x04, 0x55, 0x26, 0xa4, 0xc9, 0x25,
	0x00, 0x33, 0x38, 0x3e, 0x37, 0xb5, 0xb8, 0x38, 0x31, 0x3d, 0x55, 0x82, 0x05, 0x6c, 0x28, 0x3f,
	0x4c, 0xdc, 0x17, 0x22, 0xac, 0x24, 0xca, 0xc5, 0xec, 0x98, 0x9c, 0x2d, 0xc4, 0xc7, 0xc5, 0x04,
	0x75, 0x14, 0x47, 0x10, 0x90, 0xa5, 0x15, 0xc3, 0xc5, 0x87, 0x6a, 0xb6, 0x10, 0x3b, 0x17, 0xb3,
	0x9f, 0x6b, 0xb8, 0x00, 0x83, 0x10, 0x2f, 0x17, 0xa7, 0x8b, 0x6b, 0x80, 0x8f, 0x7f, 0xa4, 0xa7,
	0x9f, 0xbb, 0x00, 0xa3, 0x10, 0x27, 0x17, 0xab, 0x6b, 0x50, 0x90, 0x7f, 0x90, 0x00, 0x93, 0x10,
	0x0f, 0x17, 0x07, 0x44, 0xc6, 0xd5, 0x45, 0x80, 0x19, 0xc2, 0xf3, 0x71, 0x0d, 0x01, 0x29, 0x63,
	0x11, 0xe2, 0xe6, 0x62, 0x07, 0xf3, 0x80, 0x52, 0xac, 0x46, 0x0e, 0x08, 0xd3, 0xc1, 0x21, 0x53,
	0x2c, 0xa4, 0xc7, 0xc5, 0xe2, 0x9a, 0x9b, 0x59, 0x22, 0x24, 0x86, 0xe1, 0x35, 0xb0, 0x02, 0x29,
	0x1e, 0xb8, 0x38, 0xd0, 0xb5, 0x4a, 0x0c, 0x49, 0x6c, 0xe0, 0xc0, 0x36, 0x06, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x71, 0xc0, 0xaf, 0xc6, 0x7c, 0x01, 0x00, 0x00,
}
